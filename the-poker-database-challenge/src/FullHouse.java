
import java.sql.*;
import java.text.*;
import java.util.*;
import javax.swing.*;
import javax.swing.table.*;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Danielle
 */
public class FullHouse extends javax.swing.JFrame {

    public static String query;
    public static String[] kolomnamen;
    public static String labeltekst;
    public static int rondeNR = 0;
    public static int aantalRondes;
    private String speler;
    Object toernooiID;
    ArrayList<String> lijstWinnaars = new ArrayList<>();
    ArrayList<String> actieveDeelnemers = new ArrayList<>();
    ArrayList<String> knockouts = new ArrayList<>();

    /**
     * Creates new form FullHouse
     */
    public FullHouse() {
        initComponents();
        geplandeToernooien();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtGeplandeToernooien = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        tfToernooiSelectie = new javax.swing.JTextField();
        rbToernooiNietBetaald = new javax.swing.JRadioButton();
        rbToernooiWelBetaald = new javax.swing.JRadioButton();
        rbAlleNietBetaald = new javax.swing.JRadioButton();
        btOpenOverzicht = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        btOverzichtSpelersAdres = new javax.swing.JButton();
        btOverzichtSpelersRating = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtActieveDeelnemersRonde = new javax.swing.JTable();
        lbSelecteerToernooi = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jtGeplandeToernooienTafelIndeling = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        tfToernooiSelectieTafels = new javax.swing.JTextField();
        lbTafelIndeling = new javax.swing.JLabel();
        btBerekenTafelIndeling = new javax.swing.JButton();
        lbActieveDeelnemersRonde = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jtTafelIndelingToernooi = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jtActieveDeelnemers = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtGeplandeToernooien2 = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        tfToernooiSelectie2 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        lbSelecteerWinnaars = new javax.swing.JLabel();
        lbSelecteerRonde = new javax.swing.JLabel();
        cbSelecteerRonde = new javax.swing.JComboBox<Integer>();
        btRegistreerKnockOuts = new javax.swing.JButton();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jLayeredPane2 = new javax.swing.JLayeredPane();
        jLayeredPane3 = new javax.swing.JLayeredPane();
        jLayeredPane4 = new javax.swing.JLayeredPane();
        jScrollPane6 = new javax.swing.JScrollPane();
        jtDeelnameRegistratie = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        tfToernooiSelectieInschrijvingen = new javax.swing.JTextField();
        lbSelecteerToernooi1 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        jtInschrijvingen = new javax.swing.JTable();
        lbActieveDeelnemersRonde1 = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        jtWijzigInschrijving = new javax.swing.JTable();
        jbWijzigDeelname1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("FULL HOUSE");
        setMinimumSize(new java.awt.Dimension(1024, 768));

        jtGeplandeToernooien.setAutoCreateRowSorter(true);
        jtGeplandeToernooien.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jtGeplandeToernooien.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtGeplandeToernooienMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtGeplandeToernooien);

        jLabel3.setText("Geselecteerd toernooi: ");

        tfToernooiSelectie.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        tfToernooiSelectie.setEnabled(false);
        tfToernooiSelectie.setName("toernooiSelectie"); // NOI18N
        tfToernooiSelectie.setSelectionColor(new java.awt.Color(0, 0, 0));
        tfToernooiSelectie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfToernooiSelectieActionPerformed(evt);
            }
        });

        buttonGroup1.add(rbToernooiNietBetaald);
        rbToernooiNietBetaald.setSelected(true);
        rbToernooiNietBetaald.setText("Overzicht  ingeschreven deelnemers voor geselecteerd toernooi - NOG NIET BETAALD");
        rbToernooiNietBetaald.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbToernooiNietBetaaldActionPerformed(evt);
            }
        });

        buttonGroup1.add(rbToernooiWelBetaald);
        rbToernooiWelBetaald.setText("Overzicht ingeschreven deelnemers voor geselecteerd toernooi - WEL BETAALD");
        rbToernooiWelBetaald.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbToernooiWelBetaaldActionPerformed(evt);
            }
        });

        buttonGroup1.add(rbAlleNietBetaald);
        rbAlleNietBetaald.setText("Overzicht ALLE ingeschreven deelnemers die NOG NIET BETAALD hebben");
        rbAlleNietBetaald.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbAlleNietBetaaldActionPerformed(evt);
            }
        });

        btOpenOverzicht.setText("Open overzicht");
        btOpenOverzicht.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btOpenOverzichtActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1264, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tfToernooiSelectie, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(rbToernooiNietBetaald)
                    .addComponent(rbToernooiWelBetaald)
                    .addComponent(rbAlleNietBetaald)
                    .addComponent(btOpenOverzicht))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(tfToernooiSelectie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbToernooiNietBetaald)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbToernooiWelBetaald)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbAlleNietBetaald)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btOpenOverzicht)
                .addContainerGap(329, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Geplande toernooien", jPanel1);

        btOverzichtSpelersAdres.setText("Overzicht spelers - Adresgegevens");
        btOverzichtSpelersAdres.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btOverzichtSpelersAdres.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btOverzichtSpelersAdres.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btOverzichtSpelersAdresActionPerformed(evt);
            }
        });

        btOverzichtSpelersRating.setText("Overzicht spelers - Rating en gewonnen inleggeld");
        btOverzichtSpelersRating.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btOverzichtSpelersRating.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btOverzichtSpelersRating.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btOverzichtSpelersRatingActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btOverzichtSpelersAdres, javax.swing.GroupLayout.DEFAULT_SIZE, 269, Short.MAX_VALUE)
                    .addComponent(btOverzichtSpelersRating, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(985, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btOverzichtSpelersAdres, btOverzichtSpelersRating});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(btOverzichtSpelersAdres)
                .addGap(28, 28, 28)
                .addComponent(btOverzichtSpelersRating)
                .addContainerGap(487, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Spelersoverzichten", jPanel2);

        jtActieveDeelnemersRonde.setAutoCreateRowSorter(true);
        jtActieveDeelnemersRonde.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jtActieveDeelnemersRonde.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtActieveDeelnemersRondeMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jtActieveDeelnemersRonde);

        lbSelecteerToernooi.setText("Selecteer het toernooi:");

        jtGeplandeToernooienTafelIndeling.setAutoCreateRowSorter(true);
        jtGeplandeToernooienTafelIndeling.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jtGeplandeToernooienTafelIndeling.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jtGeplandeToernooienTafelIndelingMousePressed(evt);
            }
        });
        jScrollPane5.setViewportView(jtGeplandeToernooienTafelIndeling);

        jLabel7.setText("Geselecteerd toernooi: ");

        tfToernooiSelectieTafels.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        tfToernooiSelectieTafels.setEnabled(false);
        tfToernooiSelectieTafels.setName("toernooiSelectie"); // NOI18N
        tfToernooiSelectieTafels.setSelectionColor(new java.awt.Color(0, 0, 0));
        tfToernooiSelectieTafels.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfToernooiSelectieTafelsActionPerformed(evt);
            }
        });
        tfToernooiSelectieTafels.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tfToernooiSelectieTafelsPropertyChange(evt);
            }
        });

        lbTafelIndeling.setText("Tafelindeling:");

        btBerekenTafelIndeling.setText("BEREKEN TAFELINDELING");
        btBerekenTafelIndeling.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btBerekenTafelIndelingActionPerformed(evt);
            }
        });

        lbActieveDeelnemersRonde.setText("Actieve deelnemers:");

        jtTafelIndelingToernooi.setAutoCreateRowSorter(true);
        jtTafelIndelingToernooi.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jtTafelIndelingToernooi.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtTafelIndelingToernooiMouseClicked(evt);
            }
        });
        jScrollPane7.setViewportView(jtTafelIndelingToernooi);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lbSelecteerToernooi)
                    .addComponent(lbTafelIndeling)
                    .addComponent(btBerekenTafelIndeling)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(38, 38, 38)
                        .addComponent(tfToernooiSelectieTafels, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lbActieveDeelnemersRonde)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 836, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane7))
                .addContainerGap(418, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbSelecteerToernooi)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfToernooiSelectieTafels, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addComponent(lbActieveDeelnemersRonde)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btBerekenTafelIndeling)
                .addGap(18, 18, 18)
                .addComponent(lbTafelIndeling)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(79, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Tafelindeling toernooi", jPanel3);

        jtActieveDeelnemers.setAutoCreateRowSorter(true);
        jtActieveDeelnemers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jtActieveDeelnemers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtActieveDeelnemersMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jtActieveDeelnemers);

        jtGeplandeToernooien2.setAutoCreateRowSorter(true);
        jtGeplandeToernooien2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jtGeplandeToernooien2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtGeplandeToernooien2MouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jtGeplandeToernooien2MousePressed(evt);
            }
        });
        jScrollPane3.setViewportView(jtGeplandeToernooien2);

        jLabel4.setText("Selecteer het toernooi:");

        tfToernooiSelectie2.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        tfToernooiSelectie2.setEnabled(false);
        tfToernooiSelectie2.setName("toernooiSelectie"); // NOI18N
        tfToernooiSelectie2.setSelectionColor(new java.awt.Color(0, 0, 0));
        tfToernooiSelectie2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfToernooiSelectie2ActionPerformed(evt);
            }
        });
        tfToernooiSelectie2.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tfToernooiSelectie2PropertyChange(evt);
            }
        });

        jLabel5.setText("Geselecteerd toernooi: ");

        lbSelecteerWinnaars.setText("Selecteer tafelwinnaars:");

        lbSelecteerRonde.setText("Selecteer ronde:");

        cbSelecteerRonde.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbSelecteerRondeItemStateChanged(evt);
            }
        });
        cbSelecteerRonde.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cbSelecteerRondeMouseClicked(evt);
            }
        });
        cbSelecteerRonde.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbSelecteerRondeActionPerformed(evt);
            }
        });

        btRegistreerKnockOuts.setText("REGISTREER TAFELWINNAARS");
        btRegistreerKnockOuts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRegistreerKnockOutsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(38, 38, 38)
                        .addComponent(tfToernooiSelectie2, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 758, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(lbSelecteerWinnaars)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 758, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addComponent(lbSelecteerRonde)
                            .addGap(38, 38, 38)
                            .addComponent(cbSelecteerRonde, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(btRegistreerKnockOuts)))
                .addContainerGap(496, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfToernooiSelectie2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(28, 28, 28)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbSelecteerRonde)
                    .addComponent(cbSelecteerRonde, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(lbSelecteerWinnaars)
                .addGap(15, 15, 15)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btRegistreerKnockOuts)
                .addContainerGap(197, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Invoer rondewinnaars", jPanel4);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1264, Short.MAX_VALUE)
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 585, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Toernooien bewerken", jLayeredPane1);

        javax.swing.GroupLayout jLayeredPane2Layout = new javax.swing.GroupLayout(jLayeredPane2);
        jLayeredPane2.setLayout(jLayeredPane2Layout);
        jLayeredPane2Layout.setHorizontalGroup(
            jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1264, Short.MAX_VALUE)
        );
        jLayeredPane2Layout.setVerticalGroup(
            jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 585, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Spelers bewerken", jLayeredPane2);

        javax.swing.GroupLayout jLayeredPane3Layout = new javax.swing.GroupLayout(jLayeredPane3);
        jLayeredPane3.setLayout(jLayeredPane3Layout);
        jLayeredPane3Layout.setHorizontalGroup(
            jLayeredPane3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1264, Short.MAX_VALUE)
        );
        jLayeredPane3Layout.setVerticalGroup(
            jLayeredPane3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 585, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Locatie bewerken", jLayeredPane3);

        jtDeelnameRegistratie.setAutoCreateRowSorter(true);
        jtDeelnameRegistratie.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jtDeelnameRegistratie.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtDeelnameRegistratieMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jtDeelnameRegistratieMousePressed(evt);
            }
        });
        jScrollPane6.setViewportView(jtDeelnameRegistratie);

        jLabel8.setText("Geselecteerd toernooi: ");

        tfToernooiSelectieInschrijvingen.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        tfToernooiSelectieInschrijvingen.setEnabled(false);
        tfToernooiSelectieInschrijvingen.setName("toernooiSelectie"); // NOI18N
        tfToernooiSelectieInschrijvingen.setSelectionColor(new java.awt.Color(0, 0, 0));
        tfToernooiSelectieInschrijvingen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfToernooiSelectieInschrijvingenActionPerformed(evt);
            }
        });
        tfToernooiSelectieInschrijvingen.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tfToernooiSelectieInschrijvingenPropertyChange(evt);
            }
        });

        lbSelecteerToernooi1.setText("Selecteer het toernooi:");

        jtInschrijvingen.setAutoCreateRowSorter(true);
        jtInschrijvingen.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jtInschrijvingen.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtInschrijvingenMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jtInschrijvingenMousePressed(evt);
            }
        });
        jScrollPane8.setViewportView(jtInschrijvingen);

        lbActieveDeelnemersRonde1.setText("Selecteer Speler");

        jtWijzigInschrijving.setAutoCreateRowSorter(true);
        jtWijzigInschrijving.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jtWijzigInschrijving.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtWijzigInschrijvingMouseClicked(evt);
            }
        });
        jScrollPane9.setViewportView(jtWijzigInschrijving);

        jbWijzigDeelname1.setText("OPSLAAN");
        jbWijzigDeelname1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbWijzigDeelname1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Wijzig gegevens inschrijving:");

        javax.swing.GroupLayout jLayeredPane4Layout = new javax.swing.GroupLayout(jLayeredPane4);
        jLayeredPane4.setLayout(jLayeredPane4Layout);
        jLayeredPane4Layout.setHorizontalGroup(
            jLayeredPane4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 1220, Short.MAX_VALUE)
            .addGroup(jLayeredPane4Layout.createSequentialGroup()
                .addGroup(jLayeredPane4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbSelecteerToernooi1)
                    .addGroup(jLayeredPane4Layout.createSequentialGroup()
                        .addGroup(jLayeredPane4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(lbActieveDeelnemersRonde1))
                        .addGap(38, 38, 38)
                        .addComponent(tfToernooiSelectieInschrijvingen, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 758, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 758, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbWijzigDeelname1)
                    .addComponent(jLabel1))
                .addGap(0, 506, Short.MAX_VALUE))
        );
        jLayeredPane4Layout.setVerticalGroup(
            jLayeredPane4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane4Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(lbSelecteerToernooi1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jLayeredPane4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfToernooiSelectieInschrijvingen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(18, 18, 18)
                .addComponent(lbActieveDeelnemersRonde1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbWijzigDeelname1)
                .addContainerGap(101, Short.MAX_VALUE))
        );
        jLayeredPane4.setLayer(jScrollPane6, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane4.setLayer(jLabel8, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane4.setLayer(tfToernooiSelectieInschrijvingen, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane4.setLayer(lbSelecteerToernooi1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane4.setLayer(jScrollPane8, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane4.setLayer(lbActieveDeelnemersRonde1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane4.setLayer(jScrollPane9, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane4.setLayer(jbWijzigDeelname1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane4.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jTabbedPane1.addTab("Deelnameregistratie", jLayeredPane4);

        jLabel2.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel2.setText("FullHouse");

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bovpr_king.jpg"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btOverzichtSpelersRatingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btOverzichtSpelersRatingActionPerformed
        spelersOverzichtRating();
    }//GEN-LAST:event_btOverzichtSpelersRatingActionPerformed

    private void btOverzichtSpelersAdresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btOverzichtSpelersAdresActionPerformed
        spelersOverzichtAdres();
    }//GEN-LAST:event_btOverzichtSpelersAdresActionPerformed

    private void btOpenOverzichtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btOpenOverzichtActionPerformed
        int selectie = jtGeplandeToernooien.getSelectedRow();
        //check of er een toernooi is selecteerd en welke radiobutton is geselecteerd
        if ((selectie == -1) && !(rbAlleNietBetaald.isSelected())) {
            geenToernooiGeselecteerd();
        }
        if (rbToernooiNietBetaald.isSelected()) {
            overzichtPerToernooiNietBetaald();
        } else if (rbToernooiWelBetaald.isSelected()) {
            overzichtPerToernooiWelBetaald();
        } else if (rbAlleNietBetaald.isSelected()) {
            overzichtAlleNietBetaald();
        }
    }//GEN-LAST:event_btOpenOverzichtActionPerformed

    private void tfToernooiSelectieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfToernooiSelectieActionPerformed

    }//GEN-LAST:event_tfToernooiSelectieActionPerformed

    private void jtGeplandeToernooienMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtGeplandeToernooienMouseClicked
        selecteerToernooi();
    }//GEN-LAST:event_jtGeplandeToernooienMouseClicked

    private void rbToernooiNietBetaaldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rbToernooiNietBetaaldActionPerformed
    {//GEN-HEADEREND:event_rbToernooiNietBetaaldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbToernooiNietBetaaldActionPerformed

    private void rbAlleNietBetaaldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rbAlleNietBetaaldActionPerformed
    {//GEN-HEADEREND:event_rbAlleNietBetaaldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbAlleNietBetaaldActionPerformed

    private void rbToernooiWelBetaaldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rbToernooiWelBetaaldActionPerformed
    {//GEN-HEADEREND:event_rbToernooiWelBetaaldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbToernooiWelBetaaldActionPerformed

    private void jtActieveDeelnemersRondeMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jtActieveDeelnemersRondeMouseClicked
    {//GEN-HEADEREND:event_jtActieveDeelnemersRondeMouseClicked

    }//GEN-LAST:event_jtActieveDeelnemersRondeMouseClicked

    private void jtActieveDeelnemersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtActieveDeelnemersMouseClicked

    }//GEN-LAST:event_jtActieveDeelnemersMouseClicked

    private void jtGeplandeToernooien2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtGeplandeToernooien2MouseClicked
    }//GEN-LAST:event_jtGeplandeToernooien2MouseClicked

    private void tfToernooiSelectie2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfToernooiSelectie2ActionPerformed


    }//GEN-LAST:event_tfToernooiSelectie2ActionPerformed

    private void btRegistreerKnockOutsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRegistreerKnockOutsActionPerformed
        selecteerWinnaars();
    }//GEN-LAST:event_btRegistreerKnockOutsActionPerformed

    private void tfToernooiSelectie2PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tfToernooiSelectie2PropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_tfToernooiSelectie2PropertyChange

    private void tfToernooiSelectieTafelsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_tfToernooiSelectieTafelsActionPerformed
    {//GEN-HEADEREND:event_tfToernooiSelectieTafelsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfToernooiSelectieTafelsActionPerformed

    private void tfToernooiSelectieTafelsPropertyChange(java.beans.PropertyChangeEvent evt)//GEN-FIRST:event_tfToernooiSelectieTafelsPropertyChange
    {//GEN-HEADEREND:event_tfToernooiSelectieTafelsPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_tfToernooiSelectieTafelsPropertyChange

    private void cbSelecteerRondeActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cbSelecteerRondeActionPerformed
    {//GEN-HEADEREND:event_cbSelecteerRondeActionPerformed
        
    }//GEN-LAST:event_cbSelecteerRondeActionPerformed

    private void cbSelecteerRondeMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_cbSelecteerRondeMouseClicked
    {//GEN-HEADEREND:event_cbSelecteerRondeMouseClicked
        haalRonde();
    }//GEN-LAST:event_cbSelecteerRondeMouseClicked

    private void cbSelecteerRondeItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_cbSelecteerRondeItemStateChanged
    {//GEN-HEADEREND:event_cbSelecteerRondeItemStateChanged
        vulActieveDeelnemers();
    }//GEN-LAST:event_cbSelecteerRondeItemStateChanged

    private void btBerekenTafelIndelingActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btBerekenTafelIndelingActionPerformed
    {//GEN-HEADEREND:event_btBerekenTafelIndelingActionPerformed
        berekenTafelIndelingSpelers();
    }//GEN-LAST:event_btBerekenTafelIndelingActionPerformed

    private void jtGeplandeToernooien2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtGeplandeToernooien2MousePressed
        //ververs combobox: leegmaken
        cbSelecteerRonde.removeAllItems();
        selecteerToernooi2();
        haalRonde();
        //als toernooi nog geen rondes heeft, geen actieve deelnemers weergeven:
        if (aantalRondes == 0) {
            //voor de goede orde, leeg je tabel
            jtActieveDeelnemers.removeAll();
            //vul tabel met leeg model
            DefaultTableModel leegmodel = new DefaultTableModel();
            jtActieveDeelnemers.setModel(leegmodel);
            // ververs weergave
            jtActieveDeelnemers.repaint();
        }
    }//GEN-LAST:event_jtGeplandeToernooien2MousePressed

    private void jtGeplandeToernooienTafelIndelingMousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jtGeplandeToernooienTafelIndelingMousePressed
    {//GEN-HEADEREND:event_jtGeplandeToernooienTafelIndelingMousePressed
        //ververs combobox: leegmaken
        selecteerToernooiTafelIndeling();
        vulActieveDeelnemersTafels();
    }//GEN-LAST:event_jtGeplandeToernooienTafelIndelingMousePressed

    private void jtTafelIndelingToernooiMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jtTafelIndelingToernooiMouseClicked
    {//GEN-HEADEREND:event_jtTafelIndelingToernooiMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jtTafelIndelingToernooiMouseClicked

    private void jtDeelnameRegistratieMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtDeelnameRegistratieMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jtDeelnameRegistratieMouseClicked

    private void tfToernooiSelectieInschrijvingenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfToernooiSelectieInschrijvingenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfToernooiSelectieInschrijvingenActionPerformed

    private void tfToernooiSelectieInschrijvingenPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tfToernooiSelectieInschrijvingenPropertyChange
                
    }//GEN-LAST:event_tfToernooiSelectieInschrijvingenPropertyChange

    private void jtInschrijvingenMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtInschrijvingenMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jtInschrijvingenMouseClicked

    private void jtDeelnameRegistratieMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtDeelnameRegistratieMousePressed
        jtWijzigInschrijving.removeAll();
        jtWijzigInschrijving.repaint();
        selecteerToernooi3();
        vulDeelname();

    }//GEN-LAST:event_jtDeelnameRegistratieMousePressed

    private void jtWijzigInschrijvingMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtWijzigInschrijvingMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jtWijzigInschrijvingMouseClicked

    private void jtInschrijvingenMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtInschrijvingenMousePressed
        kopieerDeelnemer();
    }//GEN-LAST:event_jtInschrijvingenMousePressed

    private void jbWijzigDeelname1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbWijzigDeelname1ActionPerformed
        wijzigDeelname();
    }//GEN-LAST:event_jbWijzigDeelname1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btBerekenTafelIndeling;
    private javax.swing.JButton btOpenOverzicht;
    private javax.swing.JButton btOverzichtSpelersAdres;
    private javax.swing.JButton btOverzichtSpelersRating;
    private javax.swing.JButton btRegistreerKnockOuts;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<Integer> cbSelecteerRonde;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JLayeredPane jLayeredPane2;
    private javax.swing.JLayeredPane jLayeredPane3;
    private javax.swing.JLayeredPane jLayeredPane4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton jbWijzigDeelname1;
    private javax.swing.JTable jtActieveDeelnemers;
    private javax.swing.JTable jtActieveDeelnemersRonde;
    private javax.swing.JTable jtDeelnameRegistratie;
    private javax.swing.JTable jtGeplandeToernooien;
    private javax.swing.JTable jtGeplandeToernooien2;
    private javax.swing.JTable jtGeplandeToernooienTafelIndeling;
    private javax.swing.JTable jtInschrijvingen;
    private javax.swing.JTable jtTafelIndelingToernooi;
    private javax.swing.JTable jtWijzigInschrijving;
    private javax.swing.JLabel lbActieveDeelnemersRonde;
    private javax.swing.JLabel lbActieveDeelnemersRonde1;
    private javax.swing.JLabel lbSelecteerRonde;
    private javax.swing.JLabel lbSelecteerToernooi;
    private javax.swing.JLabel lbSelecteerToernooi1;
    private javax.swing.JLabel lbSelecteerWinnaars;
    private javax.swing.JLabel lbTafelIndeling;
    private javax.swing.JRadioButton rbAlleNietBetaald;
    private javax.swing.JRadioButton rbToernooiNietBetaald;
    private javax.swing.JRadioButton rbToernooiWelBetaald;
    private javax.swing.JTextField tfToernooiSelectie;
    private javax.swing.JTextField tfToernooiSelectie2;
    private javax.swing.JTextField tfToernooiSelectieInschrijvingen;
    private javax.swing.JTextField tfToernooiSelectieTafels;
    // End of variables declaration//GEN-END:variables

    // TABBLAD GEPLANDE TOERNOOIEN
    private void geplandeToernooien() {
        try {
            Connection conn = SimpleDataSourceV2.getConnection();
            Statement stat = conn.createStatement();
            ResultSet result = stat.executeQuery("SELECT Toernooi.toernooiID as 'Toernooi ID',spelNaam as 'Soort toernooi',\n + "
                    + "Toernooi.datum as 'Datum',hoogteInlegGeld as 'Inleggeld',maxAantalDeelnemers as 'Aantal Deelnemers',\n"
                    + "minimaleRatingMasterClass as 'Rating Masterclass',Speler.naam as 'Master voor Masterclass',\n"
                    + "locatieID as 'Locatie ID', COUNT(betaaldJN) as 'Ingeschreven', sum(Deelname.betaaldJN like 'J') as 'Reeds betaald'\n"
                    + "FROM Toernooi\n"
                    + "  left outer join Deelname on Toernooi.toernooiID = Deelname.toernooiID \n"
                    + "  left outer join Speler on Toernooi.bekendeSpeler = Speler.spelerID"
                    + "  group by Toernooi.toernooiID");
            // vraag aantal kolommen uit metadata tabel
            ResultSetMetaData md = result.getMetaData();
            int aantalKolommen = md.getColumnCount();
            // maak lege Array voor kolomnamen
            String[] kolomnamen = new String[aantalKolommen];
            // maak een DefaultTableModel met de naam tabelmodel
            DefaultTableModel tabelmodel = new DefaultTableModel() {
                // maak typen in cel onmogelijk
                public boolean isCellEditable(int rowIndex, int mColIndex) {
                    return false;
                }
            };
            //vul Array kolomnamen
            for (int j = 0; j < aantalKolommen; j++) {
                kolomnamen[j] = md.getColumnLabel(j + 1);
            }
            //ken kolomnamen toe aan tabelmodel
            tabelmodel.setColumnIdentifiers(kolomnamen);
            while (result.next()) {
                Object[] rijgegevens = new Object[aantalKolommen];
                for (int i = 0; i < aantalKolommen; i++) {
                    rijgegevens[i] = result.getObject(i + 1);
                    //zet datum uit sql om naar weergave normale nl datum 
                    String datumsql = result.getString("datum");

                    try {
                        java.sql.Date sqlDate = dateStringToMySqlDate(datumsql);
                        String datum = mySqlDateToString(sqlDate);
                        //zet juiste datum terug in betreffende kolom: 2 bevat datum
                        rijgegevens[2] = datum;
                    } catch (Exception e) {
                        System.out.println(e);
                    }
                }
                tabelmodel.addRow(rijgegevens);
            }
            jtGeplandeToernooien.setModel(tabelmodel);
            jtGeplandeToernooien2.setModel(tabelmodel);
            jtGeplandeToernooienTafelIndeling.setModel(tabelmodel);
            jtDeelnameRegistratie.setModel(tabelmodel);
        } catch (SQLException e) {
            System.out.println("SQL fout bij vullen lijst: " + e);
        }
    }

    // TABBLAD GEPLANDE TOERNOOIEN
    private void selecteerToernooi() {
        int selectie = jtGeplandeToernooien.getSelectedRow();
        //selectie staat voor rij, 0 staat voor de kolom waarin het toernooiID staat:
        Object toernooiID = jtGeplandeToernooien.getValueAt(selectie, 0);
        try {
            Connection conn = SimpleDataSourceV2.getConnection();
            Statement stat = conn.createStatement();
            ResultSet result = stat.executeQuery("SELECT toernooiID, spelNaam, Toernooi.datum from Toernooi where toernooiID = '" + toernooiID + "'");
            while (result.next()) {
                int ID = result.getInt("toernooiID");
                //zet datum uit sql om naar weergave normale nl datum
                String datumsql = result.getString("datum");
                try {
                    java.sql.Date sqlDate = dateStringToMySqlDate(datumsql);
                    String datum = mySqlDateToString(sqlDate);
                    String soort = result.getString("spelNaam");
                    String jTF = "Toernooi nr " + Integer.toString(ID) + ": " + soort + " op " + datum;
                    tfToernooiSelectie.setText(jTF);
                } catch (Exception e) {
                    /* je moet een try catch hebben anders klaagt de convert method dateStringToMySqlDate */
                    System.out.println(e);
                }

            }
        } catch (SQLException e) {
            System.out.println("SQL fout bij vullen lijst: " + e);
        }
    }

    // TABBLAD GEPLANDE TOERNOOIEN
    private void overzichtPerToernooiWelBetaald() {
        try {
            int selectie = jtGeplandeToernooien.getSelectedRow();
            //selectie staat voor rij, 0 staat voor de kolom waarin het toernooiID staat:
            Object toernooiID = jtGeplandeToernooien.getValueAt(selectie, 0);
            String ID = toernooiID.toString();
            query = "SELECT Speler.spelerID as 'Speler ID', Speler.naam as 'Speler', Deelname.betaaldJN as 'Betaald'\n"
                    + "  FROM Deelname \n"
                    + " left outer join Speler\n"
                    + "  on Deelname.SpelerID = Speler.SpelerID\n"
                    + "  where Deelname.toernooiID = '" + ID + "' AND Deelname.betaaldJN like 'J'";
            //vul tekst voor label
            labeltekst = tfToernooiSelectie.getText();
            //creÃ«er nieuw frame
            spelersOverzicht overzicht = new spelersOverzicht();
            //centreer het frame:
            overzicht.setLocationRelativeTo(null);
            overzicht.setVisible(true);
        } catch (IndexOutOfBoundsException e) {
            System.out.println(e);
        }
    }

    // TABBLAD GEPLANDE TOERNOOIEN
    private void overzichtPerToernooiNietBetaald() {
        try {
            int selectie = jtGeplandeToernooien.getSelectedRow();
            //selectie staat voor rij, 0 staat voor de kolom waarin het toernooiID staat:
            Object toernooiID = jtGeplandeToernooien.getValueAt(selectie, 0);
            String ID = toernooiID.toString();
            query = "SELECT Speler.spelerID as 'Speler ID', Speler.naam as 'Speler', Deelname.betaaldJN as 'Betaald'\n"
                    + "  FROM Deelname \n"
                    + " left outer join Speler\n"
                    + "  on Deelname.SpelerID = Speler.SpelerID\n"
                    + "  where Deelname.toernooiID = '" + ID + "' AND Deelname.betaaldJN like 'N'";
            //vul tekst voor label
            labeltekst = tfToernooiSelectie.getText();
            //creÃ«er nieuw frame
            spelersOverzicht overzicht = new spelersOverzicht();
            //centreer het frame:
            overzicht.setLocationRelativeTo(null);
            overzicht.setVisible(true);
        } catch (IndexOutOfBoundsException e) {
            System.out.println(e);
        }
    }

    // TABBLAD GEPLANDE TOERNOOIEN
    private void overzichtAlleNietBetaald() {
        try {
            query = "SELECT Speler.spelerID as 'Speler ID', Speler.naam as 'Speler', Deelname.toernooiID as 'Toernooi', Toernooi.datum as 'Datum', Deelname.betaaldJN as 'Betaald'\n"
                    + " FROM Deelname\n"
                    + " left outer join Speler\n"
                    + " on Deelname.SpelerID = Speler.SpelerID\n"
                    + " left outer join Toernooi\n"
                    + " on Toernooi.toernooiID = Deelname.toernooiID\n"
                    + " where Deelname.betaaldJN like 'N'";
            //vul tekst voor label
            labeltekst = "Alle spelers die zijn ingeschreven voor een toernooi maar die NOG NIET hebben betaald";
            //creÃ«er nieuw frame
            spelersOverzicht overzicht = new spelersOverzicht();
            //centreer het frame:
            overzicht.setLocationRelativeTo(null);
            overzicht.setVisible(true);
        } catch (IndexOutOfBoundsException e) {
            System.out.println(e);
        }

    }

    // TABBLAD GEPLANDE TOERNOOIEN
    private void geenToernooiGeselecteerd() {
        JOptionPane selecteerToernooi = new JOptionPane();
        selecteerToernooi.showMessageDialog(rootPane, "Selecteer een toernooi", "Selectie ontbreekt", 1);
    }

    // TABBLAD SPELEROVERZICHTEN
    private void spelersOverzichtAdres() {
        query = "SELECT spelerId as 'Speler ID', naam as 'Naam', straat as 'Straat en huisnr', postcode as 'Postcode', woonplaats as 'Plaats', emailadres as 'E-mail', telefoonnr as 'Tel.nr.' from Speler";
        //vul tekst voor label
        labeltekst = "Adresgegevens";
        //creÃ«er nieuw frame
        spelersOverzicht overzicht = new spelersOverzicht();
        //centreer het frame:
        overzicht.setLocationRelativeTo(null);
        overzicht.setVisible(true);
    }

    // TABBLAD SPELEROVERZICHTEN
    private void spelersOverzichtRating() {
        query = "SELECT spelerId as 'Speler ID', naam as 'Naam', totaalGewonnenPuntenPoker as 'Tot. punten Poker',totaalGewonnenBedragPoker as 'Tot. bedrag Poker', totaalGewonnenPuntenBridge as 'Tot. punten Bridge',totaalGewonnenBedragBridge as 'Tot. bedrag Bridge',totaalGewonnenPuntenKlaverjassen as 'Tot. punten Klaverjassen',totaalGewonnenBedragKlaverjassen as 'Tot. bedrag Klaverjassen' from Speler";
        //vul tekst voor label
        labeltekst = "Overzicht Rating en Gewonnen Bedragen";
        //creÃ«er nieuw frame
        spelersOverzicht overzicht = new spelersOverzicht();
        //centreer het frame:
        overzicht.setLocationRelativeTo(null);
        overzicht.setVisible(true);
    }

    // TABBLAD TAFELINDELING
    private void selecteerToernooiTafelIndeling() {
        int selectie = jtGeplandeToernooienTafelIndeling.getSelectedRow();
        //selectie staat voor rij, 0 staat voor de kolom waarin het toernooiID staat:
        toernooiID = jtGeplandeToernooienTafelIndeling.getValueAt(selectie, 0);
        try {
            Connection conn = SimpleDataSourceV2.getConnection();
            Statement stat = conn.createStatement();
            ResultSet result = stat.executeQuery("SELECT toernooiID, "
                    + "spelNaam, Toernooi.datum from Toernooi where "
                    + "toernooiID = '" + toernooiID + "'");
            while (result.next()) {
                int ID = result.getInt("toernooiID");
                //zet datum uit sql om naar weergave normale nl datum
                String datumsql = result.getString("datum");
                try {
                    java.sql.Date sqlDate = dateStringToMySqlDate(datumsql);
                    String datum = mySqlDateToString(sqlDate);
                    String soort = result.getString("spelNaam");
                    String jTF = "Toernooi nr " + Integer.toString(ID) + ": "
                            + soort + " op " + datum;
                    tfToernooiSelectieTafels.setText(jTF);
                } catch (Exception e) {
                    /* je moet een try catch hebben anders klaagt de convert 
                     method dateStringToMySqlDate 
                     */
                    System.out.println(e);
                }
            }
        } catch (SQLException e) {
            System.out.println("SQL fout bij vullen lijst: " + e);
        }
    }

    // TABBLAD TAFELINDELING
    private void vulActieveDeelnemersTafels() {
        try {
            int selectie = jtGeplandeToernooienTafelIndeling.getSelectedRow();
            toernooiID = jtGeplandeToernooienTafelIndeling.getValueAt(selectie, 0);
            Connection conn = SimpleDataSourceV2.getConnection();
            Statement stat2 = conn.createStatement();
            ResultSet result = stat2.executeQuery("SELECT Deelname.toernooiID \n"
                    + "as 'Toernooi ID', Deelname.SpelerID as 'Speler ID',"
                    + " Speler.naam as 'Naam Speler'\n"
                    + " FROM Deelname\n"
                    + " left outer join Speler\n"
                    + " on Deelname.spelerID = Speler.spelerID\n"
                    + " where Deelname.toernooiID = '" + toernooiID + "'\n"
                    + " AND Deelname.betaaldJN like 'J'\n"
                    + " AND Deelname.actiefInToernooiJN like 'J'\n"
                    + " order by Deelname.spelerID");          

            //vraag aantal kolommen uit metadata tabel
            ResultSetMetaData md = result.getMetaData();
            int aantalKolommen = md.getColumnCount();
            // maak lege Array voor kolomnamen
            String[] kolomnamen = new String[aantalKolommen];
            // maak een DefaultTableModel met de naam tabelmodel
            DefaultTableModel tabelmodel = new DefaultTableModel() {
                // maak typen in cel onmogelijk
                public boolean isCellEditable(int rowIndex, int mColIndex) {
                    return false;
                }
            };
            //vul Array kolomnamen
            for (int j = 0; j < aantalKolommen; j++) {
                kolomnamen[j] = md.getColumnLabel(j + 1);
            }
            //ken kolomnamen toe aan tabelmodel
            tabelmodel.setColumnIdentifiers(kolomnamen);
            //vul jtActieveDeelnemersRonde
            while (result.next()) {
                Object[] rijgegevens = new Object[aantalKolommen];
                for (int i = 0; i < aantalKolommen; i++) {
                    rijgegevens[i] = result.getObject(i + 1);
                }
                tabelmodel.addRow(rijgegevens);
            }
            jtActieveDeelnemersRonde.setModel(tabelmodel);
            // vraag aantal kolommen uit metadata tabel
        } catch (SQLException f) {
            System.out.println("SQL fout bij vullen lijst: " + f);
        } catch (NullPointerException e) {
            System.out.println(e);
        }
    }

    // TABBLAD TAFELINDELING
    private void berekenTafelIndelingSpelers() {
        try {
            Connection conn = SimpleDataSourceV2.getConnection();
            Statement stat2 = conn.createStatement();
            ResultSet result = stat2.executeQuery("SELECT count(Deelname.SpelerID) "
                    + "as 'Speler ID' FROM Deelname\n"
                    + " where Deelname.toernooiID = '" + toernooiID + "'\n"
                    + " AND Deelname.betaaldJN like 'J'\n"
                    + " AND Deelname.actiefInToernooiJN like 'J'\n"
                    + " order by Deelname.spelerID");
            while (result.next()) {
                // aantalActieveSpelersRonde zijn het totaal aantal deelnemers 
                // die ingeschreven en betaald hebben
                int aantalActieveSpelersRonde = result.getInt(1);
                System.out.println(aantalActieveSpelersRonde);
            }
            int i = 0;
            ModelItemMaxAantalSpelersSpelSoort maxAantalSpelersSpelSoortAll = new ModelItemMaxAantalSpelersSpelSoort();
            ResultSet result2 = stat2.executeQuery("SELECT Tafel.toernooiID, \n"
                    + "Tafel.rondeNummer, TafelCapaciteit.tafelNummer, \n"
                    + "Spelsoort.aantalSpelersTafelSpelSoort\n"
                    + "FROM TafelCapaciteit\n"
                    + "inner join Tafel\n"
                    + "on TafelCapaciteit.tafelNummer = Tafel.tafelNummer\n"
                    + "inner join Toernooi\n"
                    + "on Tafel.toernooiID = Toernooi.toernooiID\n"
                    + "inner join Spelsoort\n"
                    + "on Spelsoort.spelNaam = Toernooi.spelNaam\n"
                    + "where Tafel.ToernooiID = '" + toernooiID + "' \n"
                    + "order by Toernooi.toernooiID");
            while (result2.next()) {
                // aantalSpelersTafelSpelSoort zijn het maximaal aantal spelers 
                // per spelsoort
                maxAantalSpelersSpelSoortAll.toernooiID = result2.getInt(1);
                maxAantalSpelersSpelSoortAll.maxAantalSpelersSpelSoort = result2.getInt(4);
                
                System.out.println("rij index:  " + i);
                System.out.println("toernooiID in modelitem: " + maxAantalSpelersSpelSoortAll.toernooiID);
                System.out.println("maxAantalSpelersSpelSoort in modelitem: " + maxAantalSpelersSpelSoortAll.maxAantalSpelersSpelSoort);
                i++;
            /*
                for (maxAantalSpelersTafel = 2; maxAantalSpelersTafel < aantalSpelersTafelSpelSoort; maxAantalSpelersTafel++){
            if(( x % y) == (0)) {
            }
            }
            else{
            y++;
            }
                */
            }
        } catch (SQLException f) {
            System.out.println("SQL fout bij vullen lijst: " + f);
        } catch (NullPointerException e) {
            System.out.println(e);
        }
    }

    private void vulTafelIndelingSpelers() {

//NOG AANPASSEN< PAS TABEL VULLEN ALS RONDE NUMMER IS GESELECTEERD (zodra ander rondenummer wordt geselecteerd, moet de tabel ververst worden        
        //int deelnemersToernooi = jtActieveDeelnemersRonde.getRowCount() / 
// aantaldeelnemers = actievedeelnemers / maxtafelbezetting % + 1;
        // 
        int[] tafel1 = jtActieveDeelnemersRonde.getSelectedRows();
        ModelItemTafels tafels = new ModelItemTafels();

        for (int i = 0; i < tafel1.length; i++) {
            // ModelItem tafels wordt gevuld met spelersID en de code 0 voor winnaar

            // aan de hand van het rij indexnummer wordt de spelerID uit de 2e kolom (=kolomnr 1) opgehaald
            tafels.SpelerID = (int) jtActieveDeelnemersRonde.getValueAt(tafel1[i], 2);
            tafels.tafelNummer = (int) jtActieveDeelnemersRonde.getValueAt(tafel1[i], 0);

            System.out.println("1142 rij index:  " + tafel1[i]);
            System.out.println("1143 spelerID in modelitem: " + tafels.SpelerID);
            System.out.println("1144 Tafelnr in modelitem: " + tafels.tafelNummer);

        }

    }

    // TABBLAD RONDEWINNAARS
    private void selecteerToernooi2() {
        int selectie = jtGeplandeToernooien2.getSelectedRow();
        //selectie staat voor rij, 0 staat voor de kolom waarin het toernooiID staat:
        toernooiID = jtGeplandeToernooien2.getValueAt(selectie, 0);
        try {
            Connection conn = SimpleDataSourceV2.getConnection();
            Statement stat = conn.createStatement();
            ResultSet result = stat.executeQuery("SELECT toernooiID, spelNaam, Toernooi.datum from Toernooi where toernooiID = '" + toernooiID + "'");
            while (result.next()) {
                int ID = result.getInt("toernooiID");
                //zet datum uit sql om naar weergave normale nl datum
                String datumsql = result.getString("datum");
                try {
                    java.sql.Date sqlDate = dateStringToMySqlDate(datumsql);
                    String datum = mySqlDateToString(sqlDate);
                    String soort = result.getString("spelNaam");
                    String jTF = "Toernooi nr " + Integer.toString(ID) + ": " + soort + " op " + datum;
                    tfToernooiSelectie2.setText(jTF);
                } catch (Exception e) {
                    /* je moet een try catch hebben anders klaagt de convert method dateStringToMySqlDate */
                    System.out.println(e);
                }

            }
        } catch (SQLException e) {
            System.out.println("SQL fout bij vullen lijst: " + e);
        }
    }

    // TABBLAD RONDEWINNAARS
    private void haalRonde() {
        // vul combobox met rondenrs
        int selectie = jtGeplandeToernooien2.getSelectedRow();
        //reset teller voor aantalRondes
        aantalRondes = 0;
        //selectie staat voor rij, 0 staat voor de kolom waarin het toernooiID staat:
        toernooiID = jtGeplandeToernooien2.getValueAt(selectie, 0);
        try {
            Connection conn = SimpleDataSourceV2.getConnection();
            Statement stat1 = conn.createStatement();
            ResultSet result1 = stat1.executeQuery("SELECT Ronde.rondeNummer from Ronde where Ronde.toernooiID =" + toernooiID);
            //vul combobox cb SelecteerRonde
            while (result1.next()) {
                rondeNR = result1.getInt(1);
                cbSelecteerRonde.addItem(rondeNR);
                aantalRondes++;
            }
        } catch (SQLException e) {
            System.out.println("SQL fout bij vullen lijst: " + e);
        }

    }

    // TABBLAD RONDEWINNAARS
    private void vulActieveDeelnemers() {
        // ik snap niet waarom, maar while result.next vult 3 x de array actieveDeelnemers, terwijl de query in mysql workbench maar 1 set ophaalt.door deze te legen, vult ie alles maar 1 keer
        // geen fraaie oplossing, maar geen tijd om het uit te zoeken
        actieveDeelnemers.clear();
        System.out.println("lijst actieveDeelnemers geleegd");
        try {
            //         actieveDeelnemers2 = jtActieveDeelnemers.getSelectedRows();
            rondeNR = (Integer) cbSelecteerRonde.getSelectedItem();
            int selectie = jtGeplandeToernooien2.getSelectedRow();
            toernooiID = jtGeplandeToernooien2.getValueAt(selectie, 0);
            //eerst arraylist actieveDeelnemers vullen
            Connection conn = SimpleDataSourceV2.getConnection();
            Statement stat = conn.createStatement();
            ResultSet result = stat.executeQuery("SELECT Deelname.spelerID\n"
                    + "  FROM Deelname  \n"
                    + "  left outer join Speler\n"
                    + "  on Deelname.SpelerID = Speler.SpelerID\n"
                    + "  where Deelname.toernooiID = '" + toernooiID + "' AND Deelname.betaaldJN like 'J'\n"
                    + "  AND actiefInToernooiJN like 'J'");
            while (result.next()) {
                String actief = (String) result.getObject(1).toString();
                actieveDeelnemers.add(actief);
                System.out.println("toegevoegd aan actief: " + actief + " in toernooi " + toernooiID);
            }

            //vullen tabel jtActieveDeelnemers
            Statement stat2 = conn.createStatement();
            ResultSet result2 = stat2.executeQuery("SELECT Tafel.tafelNummer as 'Tafelnr',Tafel.rondeNummer as 'Rondenr', Speler.spelerID as 'Speler ID', Speler.naam as 'Speler'\n"
                    + "  FROM Deelname  \n"
                    + "  left outer join Tafel\n"
                    + "  on Deelname.spelerID = Tafel.spelerID\n"
                    + "  left outer join Speler\n"
                    + "  on Deelname.SpelerID = Speler.SpelerID\n"
                    + "  where Deelname.toernooiID = '" + toernooiID + "' AND Deelname.betaaldJN like 'J'\n"
                    + " AND actiefInToernooiJN like 'J' AND Tafel.rondeNummer = " + rondeNR + " order by Tafel.tafelnummer");
            //vraag aantal kolommen uit metadata tabel
            ResultSetMetaData md = result2.getMetaData();
            int aantalKolommen = md.getColumnCount();
            // maak lege Array voor kolomnamen
            kolomnamen = new String[aantalKolommen];
            // maak een DefaultTableModel met de naam tabelmodel
            DefaultTableModel tabelmodel = new DefaultTableModel() {
                // maak typen in cel onmogelijk
                public boolean isCellEditable(int rowIndex, int mColIndex) {
                    return false;
                }
            };
            //vul Array kolomnamen
            for (int j = 0; j < aantalKolommen; j++) {
                kolomnamen[j] = md.getColumnLabel(j + 1);
            }
            //ken kolomnamen toe aan tabelmodel
            tabelmodel.setColumnIdentifiers(kolomnamen);
            //vul jtActieveDeelnemers en vul tegelijk een arraylist
            while (result2.next()) {
                // aantalKolommen staat voor aantal items in elke 'rij van het object'
                Object rijgegevens[] = new Object[aantalKolommen];
                for (int i = 0; i < aantalKolommen; i++) {
                    rijgegevens[i] = result2.getObject(i + 1);
                }
                tabelmodel.addRow(rijgegevens);
            }
            jtActieveDeelnemers.setModel(tabelmodel);
            // vraag aantal kolommen uit metadata tabel
        } catch (SQLException f) {
            System.out.println("SQL fout bij vullen lijst: " + f);
        } catch (NullPointerException e) {
            System.out.println(e);;
        }

    }
    //HIER!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    // TABBLAD RONDEWINNAARS
    private void selecteerWinnaars() {
        // selectie = geselecteerd toernooi
        int selectie = jtGeplandeToernooien2.getSelectedRow();
        Object toernooiID = jtGeplandeToernooien2.getValueAt(selectie, 0);
        //geselecteerdWinnaars bevat geselecteerde rij indexen winnaars
        int[] geselecteerdeWinnaars = jtActieveDeelnemers.getSelectedRows();
        // voeg winnaars toe aan array list
        for (int i = 0; i < geselecteerdeWinnaars.length; i++) {
            String winnaar = (String) jtActieveDeelnemers.getValueAt(geselecteerdeWinnaars[i], 2).toString();
            lijstWinnaars.add(winnaar);
        }
        try {
            Connection conn = SimpleDataSourceV2.getConnection();
            Statement stat = conn.createStatement();

            for (int i = 0; i < lijstWinnaars.size(); i++) {
                for (int j = 0; j < actieveDeelnemers.size(); j++) {
                    speler = actieveDeelnemers.get(j);
                    System.out.println("speler: " + speler);
                    System.out.println("winnaar: " + lijstWinnaars.get(i));
                    // als de speler voorkomt in de winnaarslijst, niets doen, verwijderen uit lijst actieveDeelnemers om te voorkomen dat ie met andere winnaars wordt vergeleken
                    if (lijstWinnaars.contains(speler)) {
                        actieveDeelnemers.remove(speler);
                        System.out.println("speler :" + speler + "is een winnaar en wordt niet meer vergeleken met andere winnaars");
                    } // als winnnaar niet gelijk is aan de speler, zet speler op knock out lijst    
                    else {
                        knockouts.add(speler);
                        System.out.println("          toernooi " + toernooiID + " ronde " + rondeNR + " : speler " + speler + " is knock out ");
                    }
                }
            }
            // zet actiefInToernooiJN op N voor alle spelers uit de knockouts lijst
            for (int k = 0; k < knockouts.size(); k++) {
                speler = knockouts.get(k);
                stat.executeUpdate("UPDATE pokerdatabase.Deelname SET actiefInToernooiJN='N' WHERE spelerID = '" + speler + "' and toernooiID = '" + toernooiID + "' ");

            }
        } catch (SQLException f) {
            System.out.println("SQL fout bij vullen lijst: " + f);

        } catch (NullPointerException e) {
            System.out.println(e);
        }
        ophogenRondeInToernooi();
    }

    private void ophogenRondeInToernooi() {
        //maakt volgende ronde binnen toernooi aan in database tabel Ronde
        rondeNR++;
        try {
            Connection conn = SimpleDataSourceV2.getConnection();
            Statement stat = conn.createStatement();
            stat.executeUpdate("INSERT INTO pokerdatabase.Ronde (rondeNummer, toernooiID) VALUES (" + rondeNR + "," + toernooiID + ")");

        } catch (SQLException f) {
            System.out.println("SQL fout bij vullen lijst: " + f);
        }
    }

    //TABBLAD
    private void selecteerToernooi3() {
        int selectie = jtDeelnameRegistratie.getSelectedRow();
        //selectie staat voor rij, 0 staat voor de kolom waarin het toernooiID staat:
        toernooiID = jtDeelnameRegistratie.getValueAt(selectie, 0);
        try {
            Connection conn = SimpleDataSourceV2.getConnection();
            Statement stat = conn.createStatement();
            ResultSet result = stat.executeQuery("SELECT toernooiID, spelNaam, Toernooi.datum from Toernooi where toernooiID = '" + toernooiID + "'");
            while (result.next()) {
                int ID = result.getInt("toernooiID");
                //zet datum uit sql om naar weergave normale nl datum
                String datumsql = result.getString("datum");
                try {
                    java.sql.Date sqlDate = dateStringToMySqlDate(datumsql);
                    String datum = mySqlDateToString(sqlDate);
                    String soort = result.getString("spelNaam");
                    String jTF = "Toernooi nr " + Integer.toString(ID) + ": " + soort + " op " + datum;
                    tfToernooiSelectieInschrijvingen.setText(jTF);
                } catch (Exception e) {
                    /* je moet een try catch hebben anders klaagt de convert method dateStringToMySqlDate */
                    System.out.println(e);
                }

            }
        } catch (SQLException e) {
            System.out.println("SQL fout bij vullen lijst: " + e);
        }
    }

    private void vulDeelname() {
        try {
            int selectie = jtDeelnameRegistratie.getSelectedRow();
    //selectie staat voor rij, 0 staat voor de kolom waarin het toernooiID staat:
            toernooiID = jtDeelnameRegistratie.getValueAt(selectie, 0);
            Connection conn = SimpleDataSourceV2.getConnection();
            //maak het mogelijk om je resultset te wijzigen
            Statement stat = conn.createStatement();
            ResultSet result = stat.executeQuery("SELECT Deelname.spelerID as 'Speler ID', Speler.naam as 'Speler', Deelname.toernooiID as 'Toernooi', BetaaldJN as 'Betaald?', mailOfTelefoon as 'Wijze van aanmelding'\n"
                    + "  FROM Deelname  \n"
                    + "  left outer join Speler\n"
                    + "  on Deelname.SpelerID = Speler.SpelerID\n"
                    + "  where Deelname.toernooiID = '" + toernooiID + "' \n"
                    + "  order by toernooiID");
            //vraag aantal kolommen uit metadata tabel
            ResultSetMetaData md = result.getMetaData();
            int aantalKolommen = md.getColumnCount();
            // maak lege Array voor kolomnamen
            kolomnamen = new String[aantalKolommen];
            // maak een DefaultTableModel met de naam tabelmodel tbv jtInschrijvingen
            DefaultTableModel tabelmodel = new DefaultTableModel() {
                // maak typen in cel onmogelijk
                public boolean isCellEditable(int rowIndex, int mColIndex) {
                    return false;
                }
            };
            //vul Array kolomnamen
            for (int j = 0; j < aantalKolommen; j++) {
                kolomnamen[j] = md.getColumnLabel(j + 1);
            }
            //ken kolomnamen toe aan tabelmodel
            tabelmodel.setColumnIdentifiers(kolomnamen);
            // maak een DefaultTableModel met de naam tabelmodel tbv jtWijzigSpeler
            DefaultTableModel tabelmodel2 = new DefaultTableModel() {
                // maak typen in cel mogelijk
                public boolean isCellEditable(int rowIndex, int mColIndex) {
                    return true;
                }
            };
            //tabelmodel2.setColumnCount(aantalKolommen);
            tabelmodel2.setColumnIdentifiers(kolomnamen);
            while (result.next()) {
                // aantalKolommen staat voor aantal items in elke 'rij van het object'
                Object rijgegevens[] = new Object[aantalKolommen];
                Object rijgegevens2[] = new Object[aantalKolommen];
                for (int i = 0; i < aantalKolommen; i++) {
                    rijgegevens[i] = result.getObject(i + 1);
                }
                tabelmodel.addRow(rijgegevens);
                jtInschrijvingen.setModel(tabelmodel);
                // vul 1 lege rij in jtWijzigSpeler
                tabelmodel2.addRow(rijgegevens2);
                jtWijzigInschrijving.setModel(tabelmodel2);
            }

            jtInschrijvingen.setModel(tabelmodel);
        } catch (SQLException e) {
            System.out.println("SQL fout bij vullen lijst: " + e);
        } catch (NumberFormatException e) {
            System.out.println(e);
        }
    }
    
    private void kopieerDeelnemer() {
        jtWijzigInschrijving.removeAll();
        jtWijzigInschrijving.repaint();
        int selectieDeelnemer = jtInschrijvingen.getSelectedRow();
        Object spelerID = (String)jtInschrijvingen.getValueAt(selectieDeelnemer, 0).toString();
        Object spelerNaam = (String) jtInschrijvingen.getValueAt(selectieDeelnemer, 1).toString();
        Object IDtoernooi = jtInschrijvingen.getValueAt(selectieDeelnemer, 2);
        Object betaald = (String) jtInschrijvingen.getValueAt(0, 3).toString();
        Object mailOfTelefoon = (String) jtInschrijvingen.getValueAt(0, 4).toString();
        jtWijzigInschrijving.setValueAt(spelerID, 0, 0);
        jtWijzigInschrijving.setValueAt(spelerNaam, 0, 1);
        jtWijzigInschrijving.setValueAt(IDtoernooi, 0, 2);
        jtWijzigInschrijving.setValueAt(betaald, 0, 3);
        jtWijzigInschrijving.setValueAt(mailOfTelefoon, 0, 4);
        jtWijzigInschrijving.repaint();
    }
    
    private void wijzigDeelname() {
            try {
                int selectieWijzigDeelname = jtInschrijvingen.getSelectedRow();
            String speler = (String) jtWijzigInschrijving.getValueAt(selectieWijzigDeelname, 0).toString();
        Object spelerID = Integer.parseInt(speler);
        // Object spelerNaam = jtWijzigInschrijving.getValueAt(selectieWijzigDeelname,1);
        Object IDtoernooi = jtWijzigInschrijving.getValueAt(selectieWijzigDeelname, 2);
        Object betaald = jtWijzigInschrijving.getValueAt(selectieWijzigDeelname, 3);
        Object mailOfTelefoon = jtWijzigInschrijving.getValueAt(selectieWijzigDeelname, 4);
        Object actiefInToernooi = "X";
        if (betaald.equals("J")) {
            actiefInToernooi = "'J'";
        } else {
            actiefInToernooi = "'N'";
    
            
            Connection conn = SimpleDataSourceV2.getConnection();
            Statement stat = conn.createStatement();
            stat.executeUpdate("UPDATE pokerdatabase.Deelname (spelerID, toernooiID, betaaldJN, mailOfTelefoon, actiefInToernooiJN) VALUES\n"
                    + " (" + spelerID + "," + IDtoernooi + "," + betaald + "," + mailOfTelefoon + "," + actiefInToernooi + ")");
            }
        } catch (SQLException f) {
            System.out.println("SQL fout bij vullen lijst: " + f);
            } catch (NullPointerException g) {
                System.out.println(g);
            } catch (IndexOutOfBoundsException h) {
                System.out.println(h);
        }
    
    }
    
    //VOOR ALLE TABBLADEN
    public static String mySqlDateToString(java.sql.Date date) {
        /* ik schrijf de datum als dd-mm-yyyy */
        DateFormat df = new SimpleDateFormat("dd-mm-yyyy");
        return df.format(date);
    }

    public static java.sql.Date dateStringToMySqlDate(String date) throws ParseException {
        /* ik verwacht de datum tekst als yyyy-mm-dd */
        SimpleDateFormat format = new SimpleDateFormat("yyyy-mm-dd");
        java.util.Date parsed = format.parse(date);
        return new java.sql.Date(parsed.getTime());
    }

}
